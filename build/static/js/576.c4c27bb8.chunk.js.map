{"version":3,"file":"static/js/576.c4c27bb8.chunk.js","mappings":"mWAkBMA,GAAQC,EAAAA,EAAAA,KAEC,SAASC,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAS,yCAAG,WAAOC,GAAM,sEAC7BC,QAAQC,IAAIF,EAAQ,UAAU,2CAE/B,gBAHc,sCAKTG,EAAW,yCAAG,mFAClBN,EAAS,UAAU,2CACpB,kBAFgB,mCAIjB,OACE,SAAC,IAAa,CAACH,MAAOA,EAAM,UAC1B,UAAC,IAAS,CAACU,UAAU,OAAOC,SAAS,KAAI,WACvC,SAAC,KAAW,KACZ,UAAC,IAAG,CACFC,GAAI,CACFC,UAAW,GACV,WAEH,0BACE,kBACEC,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,WAAY,QACZ,WAEF,gBAAKC,IAAKC,EAAMC,IAAI,cAAcC,MAAO,SACzC,cACEP,MAAO,CACLQ,SAAU,OACVC,MAAO,YACPV,UAAW,QACX,2BAMR,iBACEC,MAAO,CACLD,UAAW,SACX,WAEF,8CACA,SAAC,KAAM,CACLW,cAAe,CACbC,MAAO,GACPC,OAAQ,MAEVC,iBAAkBC,EAAAA,KAAaC,MAAM,CACnCJ,MAAOG,EAAAA,KACJH,MAAM,yBACNK,IAAI,KACJC,SAAS,uBAEdC,SAAQ,yCAAE,WACR1B,EAAO,GAAD,gFACJ2B,EAAS,EAATA,UAAWC,EAAS,EAATA,UAAWC,EAAa,EAAbA,cAExB,IACED,EAAU,CAAEE,SAAS,IACrB/B,EAAUC,GACV6B,GAAc,EAMhB,CALE,MAAOE,GACP9B,QAAQ+B,MAAMD,GACdH,EAAU,CAAEE,SAAS,IACrBH,EAAU,CAAEP,OAAQW,EAAIE,UACxBJ,GAAc,EAChB,CAAC,2CACF,qDAdO,GAcN,SAED,gBACCK,EAAM,EAANA,OACAC,EAAU,EAAVA,WACAC,EAAY,EAAZA,aACAC,EAAY,EAAZA,aACAC,EAAY,EAAZA,aACAC,EAAO,EAAPA,QACAvC,EAAM,EAANA,OAAM,OAEN,kBAAMwC,YAAU,EAACd,SAAUW,EAAa,WACtC,SAAC,KAAI,CAACI,WAAS,EAACC,QAAS,EAAE,UACzB,SAAC,KAAI,CAACC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAG,UACxB,UAAC,IAAW,CACVC,WAAS,EACTd,MAAOe,QAAQR,EAAQpB,OAASe,EAAOf,OACvCb,IAAE,UAAOZ,EAAMsD,WAAWC,aAAc,WAExC,SAAC,IAAa,CACZC,GAAG,oCACHC,YAAY,gBACZC,KAAK,QACLC,MAAOrD,EAAOmB,MACdmC,KAAK,QACLC,OAAQpB,EACRqB,SAAUpB,EACVqB,WAAY,CAAC,IAEdlB,EAAQpB,OAASe,EAAOf,QACvB,SAAC,IAAc,CACba,OAAK,EACLkB,GAAG,wCAAuC,SAEzChB,EAAOf,gBAOlB,SAAC,IAAG,CAACb,GAAI,CAAEoD,GAAI,GAAI,UACjB,SAAC,IAAa,WACZ,SAAC,IAAM,CACLC,kBAAgB,EAChBC,SAAUtB,EACVQ,WAAS,EACTe,KAAK,QACLT,KAAK,SACLU,QAAQ,YACR7C,MAAM,YAAW,0BAOlB,QAIb,gBACET,MAAO,CACLS,MAAO,OACP8C,OAAQ,UACRxD,UAAW,OACXyD,UAAW,OAEbC,QAAS,WACP9D,GACF,EAAE,4BAQd,C","sources":["views/authentication/forgotpassword/index.js"],"sourcesContent":["import React from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport AnimateButton from \"ui-component/extended/AnimateButton\";\r\nimport Button from \"@mui/material/Button\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport {\r\n  FormControl,\r\n  FormHelperText,\r\n  OutlinedInput,\r\n} from \"@mui/material\";\r\nimport logo from \"../../../assets/images/Logo/studkz_logo.png\";\r\n\r\nconst theme = createTheme();\r\n\r\nexport default function Login() {\r\n  const navigate = useNavigate();\r\n\r\n  const doneClick = async (values) => {\r\n    console.log(values, \"Values\");\r\n  \r\n  };\r\n\r\n  const handleLogin = async () => {\r\n    navigate(\"/login\");\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n           }}\r\n        >\r\n          <div>\r\n            <span\r\n              style={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                marginLeft: \"88px\",\r\n              }}\r\n            >\r\n              <img src={logo} alt=\"studkz_logo\" width={\"120\"} />\r\n              <p\r\n                style={{\r\n                  fontSize: \"30px\",\r\n                  color: \"olivedrab\",\r\n                  marginTop: \"30px\",\r\n                }}\r\n              >\r\n                Stud.kz\r\n              </p>\r\n            </span>\r\n          </div>\r\n          <div\r\n            style={{\r\n              marginTop: \"130px\",\r\n            }}\r\n          >\r\n            <h2> Forgot Password</h2>\r\n            <Formik\r\n              initialValues={{\r\n                email: \"\",\r\n                submit: null,\r\n              }}\r\n              validationSchema={Yup.object().shape({\r\n                email: Yup.string()\r\n                  .email(\"Must be a valid email\")\r\n                  .max(255)\r\n                  .required(\"Email is required\"),\r\n              })}\r\n              onSubmit={async (\r\n                values,\r\n                { setErrors, setStatus, setSubmitting }\r\n              ) => {\r\n                try {\r\n                  setStatus({ success: true });\r\n                  doneClick(values);\r\n                  setSubmitting(false);\r\n                } catch (err) {\r\n                  console.error(err);\r\n                  setStatus({ success: false });\r\n                  setErrors({ submit: err.message });\r\n                  setSubmitting(false);\r\n                }\r\n              }}\r\n            >\r\n              {({\r\n                errors,\r\n                handleBlur,\r\n                handleChange,\r\n                handleSubmit,\r\n                isSubmitting,\r\n                touched,\r\n                values,\r\n              }) => (\r\n                <form noValidate onSubmit={handleSubmit}>\r\n                  <Grid container spacing={4}>\r\n                    <Grid item xs={12} sm={12}>\r\n                      <FormControl\r\n                        fullWidth\r\n                        error={Boolean(touched.email && errors.email)}\r\n                        sx={{ ...theme.typography.customInput }}\r\n                      >\r\n                        <OutlinedInput\r\n                          id=\"outlined-adornment-email-register\"\r\n                          placeholder=\"Email Address\"\r\n                          type=\"email\"\r\n                          value={values.email}\r\n                          name=\"email\"\r\n                          onBlur={handleBlur}\r\n                          onChange={handleChange}\r\n                          inputProps={{}}\r\n                        />\r\n                        {touched.email && errors.email && (\r\n                          <FormHelperText\r\n                            error\r\n                            id=\"standard-weight-helper-text--register\"\r\n                          >\r\n                            {errors.email}\r\n                          </FormHelperText>\r\n                        )}\r\n                      </FormControl>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Box sx={{ mt: 2 }}>\r\n                    <AnimateButton>\r\n                      <Button\r\n                        disableElevation\r\n                        disabled={isSubmitting}\r\n                        fullWidth\r\n                        size=\"large\"\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                      >\r\n                        Submit\r\n                      </Button>\r\n                    </AnimateButton>\r\n                  </Box>\r\n\r\n                </form>\r\n              )}\r\n            </Formik>\r\n          </div>\r\n          <div\r\n            style={{\r\n              color: \"blue\",\r\n              cursor: \"pointer\",\r\n              marginTop: \"20px\",\r\n              textAlign: \"end\",\r\n            }}\r\n            onClick={() => {\r\n              handleLogin();\r\n            }}\r\n          >\r\n            Login ?\r\n          </div>\r\n        </Box>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n"],"names":["theme","createTheme","Login","navigate","useNavigate","doneClick","values","console","log","handleLogin","component","maxWidth","sx","marginTop","style","display","alignItems","marginLeft","src","logo","alt","width","fontSize","color","initialValues","email","submit","validationSchema","Yup","shape","max","required","onSubmit","setErrors","setStatus","setSubmitting","success","err","error","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","noValidate","container","spacing","item","xs","sm","fullWidth","Boolean","typography","customInput","id","placeholder","type","value","name","onBlur","onChange","inputProps","mt","disableElevation","disabled","size","variant","cursor","textAlign","onClick"],"sourceRoot":""}